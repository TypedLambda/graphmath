{"objects":[{"type":null,"source":"lib/Mat33.ex:1","object_type":"ModuleObject","moduledoc":"This is the 3D mathematics library for graphmath.\n\nThis submodule handles 3x3 matrices using tuples of floats.\n","module":"Elixir.Graphmath.Mat33","id":"Graphmath.Mat33"},{"type":null,"source":"lib/Mat44.ex:1","object_type":"ModuleObject","moduledoc":"This is the 3D mathematics library for graphmath.\n\nThis submodule handles 4x4 matrices using tuples of floats.\n","module":"Elixir.Graphmath.Mat44","id":"Graphmath.Mat44"},{"type":null,"source":"lib/Quatern.ex:1","object_type":"ModuleObject","moduledoc":"This is the 3D mathematics library for graphmath.\n\nThis submodule handles  Quaternion using tuples of floats.\ni.e. a rotation around an axis.\n\nConsider the `quatern` format: `{ w, x, y, z }` where `w` is the angle in Radians,\nand `x` `y` `z` are the axis coordinates\n","module":"Elixir.Graphmath.Quatern","id":"Graphmath.Quatern"},{"type":null,"source":"lib/Vec2.ex:1","object_type":"ModuleObject","moduledoc":"This is the 2D mathematics library for graphmath.\n\nThis submodule handles vectors stored as a tuple.\n","module":"Elixir.Graphmath.Vec2","id":"Graphmath.Vec2"},{"type":null,"source":"lib/Vec3.ex:1","object_type":"ModuleObject","moduledoc":"This is the 3D mathematics library for graphmath.\n\nThis submodule handles 3D vectors using tuples of floats.\n","module":"Elixir.Graphmath.Vec3","id":"Graphmath.Vec3"},{"type":"def","source":"lib/Mat33.ex:49","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"add","module_id":"Graphmath.Mat33","id":"add/2","doc":"`add(a,b)` adds one `mat33` to another `mat33`.\n\n`a` is the first `mat33`.\n\n`b` is the second `mat33`.\n\nThis returns a `mat33` which is the element-wise sum of `a` and `b`.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:413","signature":[["a",[],null],["v",[],null]],"object_type":"FunctionObject","name":"apply","module_id":"Graphmath.Mat33","id":"apply/2","doc":"`apply( a, v )` transforms a `vec3` by a `mat33`.\n\n`a` is the `mat33` to transform by.\n\n`v` is the `vec3` to be transformed.\n\nThis returns a `vec3` representing **A****v**.\n\nThis is the \"full\" application of a matrix, and uses all elements.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:465","signature":[["v",[],null],["a",[],null]],"object_type":"FunctionObject","name":"apply_left","module_id":"Graphmath.Mat33","id":"apply_left/2","doc":"`apply_left( v, a )` transforms a `vec3` by a `mat33`, applied on the left.\n\n`a` is the `mat33` to transform by.\n\n`v` is the `vec3` to be transformed.\n\nThis returns a `vec3` representing **v****A**.\n\nThis is the \"full\" application of a matrix, and uses all elements.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:491","signature":[["v",[],null],["a",[],null]],"object_type":"FunctionObject","name":"apply_left_transpose","module_id":"Graphmath.Mat33","id":"apply_left_transpose/2","doc":"`apply_left_transpose( v, a )` transforms a `vec3` by a transposed `mat33`, applied on the left.\n\n`a` is the `mat33` to transform by.\n\n`v` is the `vec3` to be transformed.\n\nThis returns a `vec3` representing **v****A**<sup>T</sup>.\n\nThis is the \"full\" application of a matrix, and uses all elements.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:439","signature":[["a",[],null],["v",[],null]],"object_type":"FunctionObject","name":"apply_transpose","module_id":"Graphmath.Mat33","id":"apply_transpose/2","doc":"`apply_transpose( a, v )` transforms a `vec3` by a a transposed `mat33`.\n\n`a` is the `mat33` to transform by.\n\n`v` is the `vec3` to be transformed.\n\nThis returns a `vec3` representing **A**<sup>T</sup>**v**.\n\nThis is the \"full\" application of a matrix, and uses all elements.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:397","signature":[["a",[],null],["i",[],null],["j",[],null]],"object_type":"FunctionObject","name":"at","module_id":"Graphmath.Mat33","id":"at/3","doc":"`at( a, i, j)` selects an element of a `mat33`.\n\n`a` is the `mat33` to index.\n\n`i` is the row integer index [0,2].\n\n`j` is the column integer index [0,2].\n\nThis returns a float from the matrix at row `i` and column `j`.\n","arity":3},{"type":"def","source":"lib/Mat33.ex:281","signature":[["a",[],null]],"object_type":"FunctionObject","name":"column0","module_id":"Graphmath.Mat33","id":"column0/1","doc":"`column0( a )` selects the first column of a `mat33`.\n\n`a` is the `mat33` to take the first column of.\n\nThis returns a `vec3` representing the first column of `a`.\n","arity":1},{"type":"def","source":"lib/Mat33.ex:297","signature":[["a",[],null]],"object_type":"FunctionObject","name":"column1","module_id":"Graphmath.Mat33","id":"column1/1","doc":"`column1( a )` selects the second column of a `mat33`.\n\n`a` is the `mat33` to take the second column of.\n\nThis returns a `vec3` representing the second column of `a`.\n","arity":1},{"type":"def","source":"lib/Mat33.ex:313","signature":[["a",[],null]],"object_type":"FunctionObject","name":"column2","module_id":"Graphmath.Mat33","id":"column2/1","doc":"`column2( a )` selects the third column of a `mat33`.\n\n`a` is the `mat33` to take the third column of.\n\nThis returns a `vec3` representing the third column of `a`.\n","arity":1},{"type":"def","source":"lib/Mat33.ex:377","signature":[["a",[],null]],"object_type":"FunctionObject","name":"diag","module_id":"Graphmath.Mat33","id":"diag/1","doc":"`diag( a )` selects the diagonal of a `mat33`.\n\n`a` is the `mat33` to take the diagonal of.\n\nThis returns a `vec3` representing the diagonal of `a`.\n","arity":1},{"type":"def","source":"lib/Mat33.ex:21","signature":[],"object_type":"FunctionObject","name":"identity","module_id":"Graphmath.Mat33","id":"identity/0","doc":"`identity()` creates an identity `mat33`.\n\nThis returns an identity `mat33`.\n","arity":0},{"type":"def","source":"lib/Mat33.ex:165","signature":[["theta",[],null]],"object_type":"FunctionObject","name":"make_rotate","module_id":"Graphmath.Mat33","id":"make_rotate/1","doc":"`make_rotate( theta )` creates a mat33 that rotates a vec2 by `theta` radians about the +Z axis.\n\n`theta` is the float of the number of radians of rotation the matrix will provide.\n\nThis returns a `mat33` which rotates by `theta` radians about the +Z axis.\n","arity":1},{"type":"def","source":"lib/Mat33.ex:115","signature":[["k",[],null]],"object_type":"FunctionObject","name":"make_scale","module_id":"Graphmath.Mat33","id":"make_scale/1","doc":"`make_scale( k )` creates a `mat33` that uniformly scales.\n\n`k` is the float value to scale by.\n\nThis returns a `mat33` whose diagonal is all `k`s.\n","arity":1},{"type":"def","source":"lib/Mat33.ex:135","signature":[["sx",[],null],["sy",[],null],["sz",[],null]],"object_type":"FunctionObject","name":"make_scale","module_id":"Graphmath.Mat33","id":"make_scale/3","doc":"`make_scale( sx, sy, sz )` creates a `mat33` that scales each axis independently.\n\n`sx` is a float for scaling the x-axis.\n\n`sy` is a float for scaling the y-axis.\n\n`sz` is a float for scaling the z-axis.\n\nThis returns a `mat33` whose diagonal is `{ sx, sy, sz }`.\n\nNote that, when used with `vec2`s via the *transform* methods, `sz` will have no effect.\n","arity":3},{"type":"def","source":"lib/Mat33.ex:151","signature":[["tx",[],null],["ty",[],null]],"object_type":"FunctionObject","name":"make_translate","module_id":"Graphmath.Mat33","id":"make_translate/2","doc":"`make_translate( tx, ty )` creates a mat33 that translates a vec2 by (tx, ty).\n\n`tx` is a float for translating along the x-axis.\n\n`ty` is a float for translating along the y-axis.\n\nThis returns a `mat33` which translates by a `vec2` `{ tx, ty }`.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:215","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"multiply","module_id":"Graphmath.Mat33","id":"multiply/2","doc":"`multiply( a, b )` multiply two matrices a and b together.\n\n`a` is the `mat33` multiplicand.\n\n`b` is the `mat33` multiplier.\n\nThis returns the `mat33` product of the `a` and `b`.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:249","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"multiply_transpose","module_id":"Graphmath.Mat33","id":"multiply_transpose/2","doc":"`multiply_transpose( a, b )` multiply two matrices a and b<sup>T</sup> together.\n\n`a` is the `mat33` multiplicand.\n\n`b` is the `mat33` multiplier.\n\nThis returns the `mat33` product of the `a` and `b`<sup>T</sup>.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:184","signature":[["a",[],null],["sigfigs",[],null]],"object_type":"FunctionObject","name":"round","module_id":"Graphmath.Mat33","id":"round/2","doc":"`round( a, sigfigs )` rounds every element of a `mat33` to some number of decimal places.\n\n`a` is the `mat33` to round.\n\n`sigfigs` is an integer on [0,15] of the number of decimal places to round to.\n\nThis returns a `mat33` which is the result of rounding `a`.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:329","signature":[["a",[],null]],"object_type":"FunctionObject","name":"row0","module_id":"Graphmath.Mat33","id":"row0/1","doc":"`row0( a )` selects the first row of a `mat33`.\n\n`a` is the `mat33` to take the first row of.\n\nThis returns a `vec3` representing the first row of `a`.\n","arity":1},{"type":"def","source":"lib/Mat33.ex:345","signature":[["a",[],null]],"object_type":"FunctionObject","name":"row1","module_id":"Graphmath.Mat33","id":"row1/1","doc":"`row1( a )` selects the second row of a `mat33`.\n\n`a` is the `mat33` to take the second row of.\n\nThis returns a `vec3` representing the second row of `a`.\n","arity":1},{"type":"def","source":"lib/Mat33.ex:361","signature":[["a",[],null]],"object_type":"FunctionObject","name":"row2","module_id":"Graphmath.Mat33","id":"row2/1","doc":"`row2( a )` selects the third row of a `mat33`.\n\n`a` is the `mat33` to take the third row of.\n\nThis returns a `vec3` representing the third row of `a`.\n","arity":1},{"type":"def","source":"lib/Mat33.ex:97","signature":[["a",[],null],["k",[],null]],"object_type":"FunctionObject","name":"scale","module_id":"Graphmath.Mat33","id":"scale/2","doc":"`scale( a, k )` scales every element in a `mat33` by a coefficient k.\n\n`a` is the `mat33` to scale.\n\n`k` is the float to scale by.\n\nThis returns a `mat33` `a` scaled element-wise by `k`.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:73","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"subtract","module_id":"Graphmath.Mat33","id":"subtract/2","doc":"`subtract(a,b)` subtracts one `mat33` from another `mat33`.\n\n`a` is the minuend.\n\n`b` is the subtraherd.\n\nThis returns a `mat33` formed by the element-wise subtraction of `b` from `a`.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:519","signature":[["a",[],null],["v",[],null]],"object_type":"FunctionObject","name":"transform_point","module_id":"Graphmath.Mat33","id":"transform_point/2","doc":"`transform_point( a, v )` transforms a `vec2` point by a `mat33`.\n\n`a` is a `mat33` used to transform the point.\n\n`v` is a `vec2` to be transformed.\n\nThis returns a `vec2` representing the application of `a` to `v`.\n\nThe point `a` is internally treated as having a third coordinate equal to 1.0.\n\nNote that transforming a point will work for all transforms.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:546","signature":[["a",[],null],["v",[],null]],"object_type":"FunctionObject","name":"transform_vector","module_id":"Graphmath.Mat33","id":"transform_vector/2","doc":"`transform_vector( a, v )` transforms a `vec2` vector by a `mat33`.\n\n`a` is a `mat33` used to transform the point.\n\n`v` is a `vec2` to be transformed.\n\nThis returns a `vec2` representing the application of `a` to `v`.\n\nThe point `a` is internally treated as having a third coordinate equal to 0.0.\n\nNote that transforming a vector will work for only rotations, scales, and shears.\n","arity":2},{"type":"def","source":"lib/Mat33.ex:33","signature":[],"object_type":"FunctionObject","name":"zero","module_id":"Graphmath.Mat33","id":"zero/0","doc":"`zero()` creates a zeroed `mat33`.\n\nThis returns a zeroed `mat33`.\n","arity":0},{"type":"def","source":"lib/Mat44.ex:52","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"add","module_id":"Graphmath.Mat44","id":"add/2","doc":"`add(a,b)` adds one `mat44` to another `mat44`.\n\n`a` is the first `mat44`.\n\n`b` is the second `mat44`.\n\nThis returns a `mat44` which is the element-wise sum of `a` and `b`.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:540","signature":[["a",[],null],["v",[],null]],"object_type":"FunctionObject","name":"apply","module_id":"Graphmath.Mat44","id":"apply/2","doc":"`apply( a, v )` transforms a `vec4` by a `mat44`.\n\n`a` is the `mat44` to transform by.\n\n`v` is the `vec4` to be transformed.\n\nThis returns a `vec4` representing **A****v**.\n\nThis is the \"full\" application of a matrix, and uses all elements.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:596","signature":[["v",[],null],["a",[],null]],"object_type":"FunctionObject","name":"apply_left","module_id":"Graphmath.Mat44","id":"apply_left/2","doc":"`apply_left( v, a )` transforms a `vec4` by a `mat44`, applied on the left.\n\n`a` is the `mat44` to transform by.\n\n`v` is the `vec4` to be transformed.\n\nThis returns a `vec4` representing **v****A**.\n\nThis is the \"full\" application of a matrix, and uses all elements.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:624","signature":[["v",[],null],["a",[],null]],"object_type":"FunctionObject","name":"apply_left_transpose","module_id":"Graphmath.Mat44","id":"apply_left_transpose/2","doc":"`apply_left_transpose( v, a )` transforms a `vec3` by a transposed `mat33`, applied on the left.\n\n`a` is the `mat44` to transform by.\n\n`v` is the `vec4` to be transformed.\n\nThis returns a `vec4` representing **v****A**<sup>T</sup>.\n\nThis is the \"full\" application of a matrix, and uses all elements.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:568","signature":[["a",[],null],["v",[],null]],"object_type":"FunctionObject","name":"apply_transpose","module_id":"Graphmath.Mat44","id":"apply_transpose/2","doc":"`apply_transpose( a, v )` transforms a `vec4` by a a transposed `mat44`.\n\n`a` is the `mat44` to transform by.\n\n`v` is the `vec4` to be transformed.\n\nThis returns a `vec4` representing **A**<sup>T</sup>**v**.\n\nThis is the \"full\" application of a matrix, and uses all elements.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:524","signature":[["a",[],null],["i",[],null],["j",[],null]],"object_type":"FunctionObject","name":"at","module_id":"Graphmath.Mat44","id":"at/3","doc":"`at( a, i, j)` selects an element of a `mat44`.\n\n`a` is the `mat44` to index.\n\n`i` is the row integer index [0,3].\n\n`j` is the column integer index [0,3].\n\nThis returns a float from the matrix at row `i` and column `j`.\n","arity":3},{"type":"def","source":"lib/Mat44.ex:368","signature":[["a",[],null]],"object_type":"FunctionObject","name":"column0","module_id":"Graphmath.Mat44","id":"column0/1","doc":"`column0( a )` selects the first column of a `mat44`.\n\n`a` is the `mat44` to take the first column of.\n\nThis returns a `vec4` representing the first column of `a`.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:385","signature":[["a",[],null]],"object_type":"FunctionObject","name":"column1","module_id":"Graphmath.Mat44","id":"column1/1","doc":"`column1( a )` selects the second column of a `mat44`.\n\n`a` is the `mat44` to take the second column of.\n\nThis returns a `vec4` representing the second column of `a`.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:402","signature":[["a",[],null]],"object_type":"FunctionObject","name":"column2","module_id":"Graphmath.Mat44","id":"column2/1","doc":"`column2( a )` selects the third column of a `mat44`.\n\n`a` is the `mat44` to take the third column of.\n\nThis returns a `vec4` representing the third column of `a`.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:419","signature":[["a",[],null]],"object_type":"FunctionObject","name":"column3","module_id":"Graphmath.Mat44","id":"column3/1","doc":"`column3( a )` selects the fourth column of a `mat44`.\n\n`a` is the `mat44` to take the fourth column of.\n\nThis returns a `vec4` representing the fourth column of `a`.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:503","signature":[["a",[],null]],"object_type":"FunctionObject","name":"diag","module_id":"Graphmath.Mat44","id":"diag/1","doc":"`diag( a )` selects the diagonal of a `mat44`.\n\n`a` is the `mat44` to take the diagonal of.\n\nThis returns a `vec4` representing the diagonal of `a`.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:22","signature":[],"object_type":"FunctionObject","name":"identity","module_id":"Graphmath.Mat44","id":"identity/0","doc":"`identity()` creates an identity `mat44`.\n\nThis returns an identity `mat44`.\n","arity":0},{"type":"def","source":"lib/Mat44.ex:186","signature":[["theta",[],null]],"object_type":"FunctionObject","name":"make_rotate_x","module_id":"Graphmath.Mat44","id":"make_rotate_x/1","doc":"`make_rotate_x( theta )` creates a `mat44` that rotates a `vec3` by `theta` radians about the +X axis.\n\n`theta` is the float of the number of radians of rotation the matrix will provide.\n\nThis returns a `mat44` which rotates by `theta` radians about the +X axis.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:204","signature":[["theta",[],null]],"object_type":"FunctionObject","name":"make_rotate_y","module_id":"Graphmath.Mat44","id":"make_rotate_y/1","doc":"`make_rotate_y( theta )` creates a `mat44` that rotates a `vec3` by `theta` radians about the +Y axis.\n\n`theta` is the float of the number of radians of rotation the matrix will provide.\n\nThis returns a `mat44` which rotates by `theta` radians about the +Y axis.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:222","signature":[["theta",[],null]],"object_type":"FunctionObject","name":"make_rotate_z","module_id":"Graphmath.Mat44","id":"make_rotate_z/1","doc":"`make_rotate_Z( theta )` creates a `mat44` that rotates a `vec3` by `theta` radians about the +Z axis.\n\n`theta` is the float of the number of radians of rotation the matrix will provide.\n\nThis returns a `mat44` which rotates by `theta` radians about the +Z axis.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:126","signature":[["k",[],null]],"object_type":"FunctionObject","name":"make_scale","module_id":"Graphmath.Mat44","id":"make_scale/1","doc":"`make_scale( k )` creates a `mat44` that uniformly scales.\n\n`k` is the float value to scale by.\n\nThis returns a `mat44` whose diagonal is all `k`s.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:149","signature":[["sx",[],null],["sy",[],null],["sz",[],null],["sw",[],null]],"object_type":"FunctionObject","name":"make_scale","module_id":"Graphmath.Mat44","id":"make_scale/4","doc":"`make_scale( sx, sy, sz, sw )` creates a `mat44` that scales each axis independently.\n\n`sx` is a float for scaling the x-axis.\n\n`sy` is a float for scaling the y-axis.\n\n`sz` is a float for scaling the z-axis.\n\n`sw` is a float for scaling the w-axis.\n\nThis returns a `mat44` whose diagonal is `{ sx, sy, sz, sw }`.\n\nNote that, when used with `vec3`s via the *transform* methods, `sw` will have no effect.\n","arity":4},{"type":"def","source":"lib/Mat44.ex:170","signature":[["tx",[],null],["ty",[],null],["tz",[],null]],"object_type":"FunctionObject","name":"make_translate","module_id":"Graphmath.Mat44","id":"make_translate/3","doc":"`make_translate( tx, ty, tz )` creates a mat44 that translates a point by tx, ty, and tz.\n\n`make_translate( tx, ty, tz )` creates a mat44 that translates a vec3 by (tx, ty, tz).\n\n`tx` is a float for translating along the x-axis.\n\n`ty` is a float for translating along the y-axis.\n\n`tz` is a float for translating along the z-axis.\n\nThis returns a `mat44` which translates by a `vec3` `{ tx, ty, tz }`.\n","arity":3},{"type":"def","source":"lib/Mat44.ex:282","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"multiply","module_id":"Graphmath.Mat44","id":"multiply/2","doc":"`multiply( a, b )` multiply two matrices a and b together.\n\n`a` is the `mat44` multiplicand.\n\n`b` is the `mat44` multiplier.\n\nThis returns the `mat44` product of the `a` and `b`.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:326","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"multiply_transpose","module_id":"Graphmath.Mat44","id":"multiply_transpose/2","doc":"`multiply_transpose( a, b )` multiply two matrices a and b<sup>T</sup> together.\n\n`a` is the `mat44` multiplicand.\n\n`b` is the `mat44` multiplier.\n\nThis returns the `mat44` product of the `a` and `b`<sup>T</sup>.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:242","signature":[["a",[],null],["sigfigs",[],null]],"object_type":"FunctionObject","name":"round","module_id":"Graphmath.Mat44","id":"round/2","doc":"`round( a, sigfigs )` rounds every element of a `mat44` to some number of decimal places.\n\n`a` is the `mat44` to round.\n\n`sigfigs` is an integer on [0,15] of the number of decimal places to round to.\n\nThis returns a `mat44` which is the result of rounding `a`.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:436","signature":[["a",[],null]],"object_type":"FunctionObject","name":"row0","module_id":"Graphmath.Mat44","id":"row0/1","doc":"`row0( a )` selects the first row of a `mat44`.\n\n`a` is the `mat44` to take the first row of.\n\nThis returns a `vec4` representing the first row of `a`.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:452","signature":[["a",[],null]],"object_type":"FunctionObject","name":"row1","module_id":"Graphmath.Mat44","id":"row1/1","doc":"`row1( a )` selects the second row of a `mat44`.\n\n`a` is the `mat44` to take the second row of.\n\nThis returns a `vec4` representing the second row of `a`.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:469","signature":[["a",[],null]],"object_type":"FunctionObject","name":"row2","module_id":"Graphmath.Mat44","id":"row2/1","doc":"`row2( a )` selects the third row of a `mat44`.\n\n`a` is the `mat44` to take the third row of.\n\nThis returns a `vec4` representing the third row of `a`.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:486","signature":[["a",[],null]],"object_type":"FunctionObject","name":"row3","module_id":"Graphmath.Mat44","id":"row3/1","doc":"`row3( a )` selects the fourth row of a `mat44`.\n\n`a` is the `mat44` to take the fourth row of.\n\nThis returns a `vec4` representing the fourth row of `a`.\n","arity":1},{"type":"def","source":"lib/Mat44.ex:106","signature":[["a",[],null],["k",[],null]],"object_type":"FunctionObject","name":"scale","module_id":"Graphmath.Mat44","id":"scale/2","doc":"`scale( a, k )` scales every element in a `mat44` by a coefficient k.\n\n`a` is the `mat44` to scale.\n\n`k` is the float to scale by.\n\nThis returns a `mat44` `a` scaled element-wise by `k`.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:79","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"subtract","module_id":"Graphmath.Mat44","id":"subtract/2","doc":"`subtract(a,b)` subtracts one `mat44` from another `mat44`.\n\n`a` is the minuend.\n\n`b` is the subtraherd.\n\nThis returns a `mat44` formed by the element-wise subtraction of `b` from `a`.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:654","signature":[["a",[],null],["v",[],null]],"object_type":"FunctionObject","name":"transform_point","module_id":"Graphmath.Mat44","id":"transform_point/2","doc":"`transform_point( a, v )` transforms a `vec3` point by a `mat44`.\n\n`a` is a `mat44` used to transform the point.\n\n`v` is a `vec3` to be transformed.\n\nThis returns a `vec3` representing the application of `a` to `v`.\n\nThe point `a` is internally treated as having a fourth coordinate equal to 1.0.\n\nNote that transforming a point will work for all transforms.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:683","signature":[["a",[],null],["v",[],null]],"object_type":"FunctionObject","name":"transform_vector","module_id":"Graphmath.Mat44","id":"transform_vector/2","doc":"`transform_vector( a, v )` transforms a `vec3` vector by a `mat44`.\n\n`a` is a `mat44` used to transform the point.\n\n`v` is a `vec3` to be transformed.\n\nThis returns a `vec3` representing the application of `a` to `v`.\n\nThe point `a` is internally treated as having a fourth coordinate equal to 0.0.\n\nNote that transforming a vector will work for only rotations, scales, and shears.\n","arity":2},{"type":"def","source":"lib/Mat44.ex:35","signature":[],"object_type":"FunctionObject","name":"zero","module_id":"Graphmath.Mat44","id":"zero/0","doc":"`zero()` creates a zeroed `mat44`.\n\nThis returns a zeroed `mat44`.\n","arity":0},{"type":"def","source":"lib/Quatern.ex:89","signature":[["lhs",[],null],["rhs",[],null]],"object_type":"FunctionObject","name":"add","module_id":"Graphmath.Quatern","id":"add/2","doc":"`add(lhs, rhs)` add two quaternions.\n\n`lhs` is the first `quatern`\n\n`rhs` is the second `quatern`\n\nIt returns a `quatern` of the form\n    { lhs<sub>w</sub> + rhs<sub>w</sub>, lhs<sub>x</sub> + rhs<sub>x</sub>, lhs<sub>y</sub> + rhs<sub>y</sub>, lhs<sub>z</sub> + rhs<sub>z</sub> }.\n","arity":2},{"type":"def","source":"lib/Quatern.ex:375","signature":[["quat",[],null]],"object_type":"FunctionObject","name":"conjugate","module_id":"Graphmath.Quatern","id":"conjugate/1","doc":"`conjugate(quat)` returns the conjugate of a quaternion.\n\n`quat` is the quaternion to get the conjugate of.\n\nIt returns a `quatern` representing the inverse of the unit quatern.\n\nNote that the conjugate of a unit quaternion is its inverse.\n","arity":1},{"type":"def","source":"lib/Quatern.ex:28","signature":[],"object_type":"FunctionObject","name":"create","module_id":"Graphmath.Quatern","id":"create/0","doc":"`create()` creates a zeroed `quatern`.\n\nIt takes no arguments.\n\nIt returns a `quatern` of the form `{ 0.0, 0.0, 0.0, 0.0  }`.\n","arity":0},{"type":"def","source":"lib/Quatern.ex:58","signature":[["quatern",[],null]],"object_type":"FunctionObject","name":"create","module_id":"Graphmath.Quatern","id":"create/1","doc":"`create(quatern)` creates a `quatern` from a list of 4 or more floats.\n\n`quatern` is a list of 4 or more floats.\n\nIt returns a `quatern` of the form `{w,x,y,z}`, where `w`, `x`, `y`, and `z` are the first four elements in `quatern`.\n","arity":1},{"type":"def","source":"lib/Quatern.ex:73","signature":[["w",[],null],["vec",[],null]],"object_type":"FunctionObject","name":"create","module_id":"Graphmath.Quatern","id":"create/2","doc":"`create(w, vec)` creates a `quatern` from an angle and an axis.\n\n`w` is the angle in radians.\n\n`vec` is the axis `vec3` of the form {x,y,z}.\n\nIt returns a `quatern` of the form `{w,x,y,z}`.\n","arity":2},{"type":"def","source":"lib/Quatern.ex:46","signature":[["w",[],null],["x",[],null],["y",[],null],["z",[],null]],"object_type":"FunctionObject","name":"create","module_id":"Graphmath.Quatern","id":"create/4","doc":"`create(w,x,y,z)` creates a `quatern` of value (w,x,y,z).\n\n`w` is the rotation arround the axis in Radians.\n\n`x` is the first element of the `vec3` representing the axis to be created.\n\n`y` is the second element of the `vec3` representing the axis to be created.\n\n`z` is the third element of the `vec3` representing the axis to be created.\n\nIt returns a `quatern` of the form `{w,x,y,z}`.\n","arity":4},{"type":"def","source":"lib/Quatern.ex:308","signature":[["lhs",[],null],["rhs",[],null]],"object_type":"FunctionObject","name":"dot","module_id":"Graphmath.Quatern","id":"dot/2","doc":"`dot(lhs, rhs)` returns a `float` resultant of the dot product bectween two quaterns.\n\n`lhs` is a quatern\n\n`rhs` is a quatern\n\nIt returns a `float` representing the dot product.\n","arity":2},{"type":"def","source":"lib/Quatern.ex:225","signature":[["mat",[],null]],"object_type":"FunctionObject","name":"from_rotation_matrix","module_id":"Graphmath.Quatern","id":"from_rotation_matrix/1","doc":"`from_rotation_matrix(mat)` creates a `quatern` from a rotation matrix.\n\n`mat` is the matrix\n\nIt returns a `quatern` of the form `{w,x,y,z}`.\n","arity":1},{"type":"def","source":"lib/Quatern.ex:181","signature":[["quat",[],null]],"object_type":"FunctionObject","name":"get_pitch","module_id":"Graphmath.Quatern","id":"get_pitch/1","doc":"`pitch(quat)` Calculate the local pitch element of a quaternion.\n\n`quat` is the quatern\n\nIt returns a `float` representing the pitch of the quaternion in Radians.\n","arity":1},{"type":"def","source":"lib/Quatern.ex:160","signature":[["quat",[],null]],"object_type":"FunctionObject","name":"get_roll","module_id":"Graphmath.Quatern","id":"get_roll/1","doc":"`roll(quat)` Calculate the local roll element of a quaternion.\n\n`quat` is the quatern\n\nIt returns a `float` representing the roll of the quaternion in Radians.\n","arity":1},{"type":"def","source":"lib/Quatern.ex:202","signature":[["quat",[],null]],"object_type":"FunctionObject","name":"get_yaw","module_id":"Graphmath.Quatern","id":"get_yaw/1","doc":"`yaw(quat)` Calculate the local yaw element of a quaternion.\n\n`quat` is the quatern\n\nIt returns a `float` representing the yaw of the quaternion in Radians.\n","arity":1},{"type":"def","source":"lib/Quatern.ex:352","signature":[["quat",[],null]],"object_type":"FunctionObject","name":"inverse","module_id":"Graphmath.Quatern","id":"inverse/1","doc":"`inverse(quat)` returns the inverse of a quaternion.\n\n`quat` is the quaternion\n\nIt returns a `quatern` representing the inverse of the parameter quaternion.\n\nIf the `quat`is less than zero, the quaternion returned is a zero quaternion.\n","arity":1},{"type":"def","source":"lib/Quatern.ex:125","signature":[["lhs",[],null],["rhs",[],null]],"object_type":"FunctionObject","name":"multiply","module_id":"Graphmath.Quatern","id":"multiply/2","doc":"`multiply(lhs, rhs)` multiply two quaternions.\n\n `lhs` is the first `quatern`\n\n `rhs` is the second `quatern`\n\n It returns a `quatern` resultant of the multiplication\n NOTE: Multiplication is not generally commutative, so in most cases p*q != q*p.\n","arity":2},{"type":"def","source":"lib/Quatern.ex:323","signature":[["quat",[],null]],"object_type":"FunctionObject","name":"norm","module_id":"Graphmath.Quatern","id":"norm/1","doc":"`norm(quat)` Returns the L2 norm of a quaternion.\n\n`quat` is a `quatern` to find the norm of.\n\nIt returns a `float` representing the L2 norm.\n","arity":1},{"type":"def","source":"lib/Quatern.ex:336","signature":[["q",[],null]],"object_type":"FunctionObject","name":"normalize","module_id":"Graphmath.Quatern","id":"normalize/1","doc":"`normalize(q) returns a normalized verison of a quaternion.\n\n`q` is the `quatern` to be normalized.\n\nThis returns a `quatern` of unit length in the same direction as `q`.\n","arity":1},{"type":"def","source":"lib/Quatern.ex:146","signature":[["quat",[],null],["scalar",[],null]],"object_type":"FunctionObject","name":"scale","module_id":"Graphmath.Quatern","id":"scale/2","doc":"`scale(quat, scalar)` multiply a `quatern` for a scalar.\n\n `quat` is the `quatern`\n\n `scalar` is the scalar\n\n It returns a `quatern` of the form\n    { a<sub>w</sub> * scalar, a<sub>x</sub> * scalar, a<sub>y</sub> * scalar, a<sub>z</sub> * scalar}.\n","arity":2},{"type":"def","source":"lib/Quatern.ex:397","signature":[["lhs",[],null],["rhs",[],null],["t",[],null]],"object_type":"FunctionObject","name":"slerp","module_id":"Graphmath.Quatern","id":"slerp/3","doc":"`slerp(lhs, rhs, t)` Performs Spherical linear interpolation between two quaternions, and returns the result.\n\n`lhs` is the first `quatern`\n\n`rhs` is the second `quatern`\n\n`t` is the interpolation parameter that will interpolate to `lhs` when `t = 0` and to `rhs` when `t = 1`.\n\nIt returns a `quatern` representing the normalized interpolation point.\n\nNote: `slerp` has the proprieties of performing the interpolation at constant velocity However, it's NOT commutative, which means\n`slerp( A, B, 0.75 ) != slerp( B, A, 0.25 )`\ntherefore be careful if your code relies in the order of the operands.\nThis is specially important in IK animation.\n","arity":3},{"type":"def","source":"lib/Quatern.ex:107","signature":[["lhs",[],null],["rhs",[],null]],"object_type":"FunctionObject","name":"subtract","module_id":"Graphmath.Quatern","id":"subtract/2","doc":"`subtract(lhs, rhs)` subtract two quaternions.\n\n `lhs` is the first `quatern`\n\n `rhs` is the second `quatern`\n\n It returns a `quatern` of the form\n    { lhs<sub>w</sub> - rhs<sub>w</sub>, lhs<sub>x</sub> - rhs<sub>x</sub>, lhs<sub>y</sub> - rhs<sub>y</sub>, lhs<sub>z</sub> - rhs<sub>z</sub> }.\n","arity":2},{"type":"def","source":"lib/Quatern.ex:268","signature":[["quat",[],null]],"object_type":"FunctionObject","name":"to_rotation_matrix","module_id":"Graphmath.Quatern","id":"to_rotation_matrix/1","doc":"`to_rotation_matrix(quat)` creates a `mat33` from a quatern.\n\n`quat` is the quatern\n\nIt returns a `mat33` representing a rotation.\n","arity":1},{"type":"def","source":"lib/Vec2.ex:67","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"add","module_id":"Graphmath.Vec2","id":"add/2","doc":"`add( a, b)` adds a vec2 (a) to a vec2 (b).\n\nIt returns a tuple of the form { ax + bx, ay + by }.\n\n`add( a, b )` adds two `vec2`s.\n\n`a` is the first `vec2`.\n\n`b` is the second `vec2`.\n\nIt returns a `vec2` of the form { a<sub>x</sub> + b<sub>x</sub>, a<sub>y</sub> + b<sub>y</sub> }.\n","arity":2},{"type":"def","source":"lib/Vec2.ex:22","signature":[],"object_type":"FunctionObject","name":"create","module_id":"Graphmath.Vec2","id":"create/0","doc":"`create()` creates a zero vec2.\n\nIt will return a tuple of the form {0.0,0.0}.\n`create()` creates a zeroed `vec2`.\n\nIt takes no arguments.\n\nIt returns a `vec2` of the form `{ 0.0, 0.0 }`.\n","arity":0},{"type":"def","source":"lib/Vec2.ex:48","signature":[["vec",[],null]],"object_type":"FunctionObject","name":"create","module_id":"Graphmath.Vec2","id":"create/1","doc":"`create(vec)` creates a `vec2` from a list of 2 or more floats.\n\n`vec` is a list of 2 or more floats.\n\nIt returns a `vec2` of the form `{x,y}`, where `x` and `y` are the first three elements in `vec`.\n","arity":1},{"type":"def","source":"lib/Vec2.ex:36","signature":[["x",[],null],["y",[],null]],"object_type":"FunctionObject","name":"create","module_id":"Graphmath.Vec2","id":"create/2","doc":"`create(x,y)` creates a `vec2` of value (x,y).\n\n`x` is the first element of the `vec3` to be created.\n\n`y` is the second element of the `vec3` to be created.\n\nIt returns a `vec2` of the form `{x,y}`.\n","arity":2},{"type":"def","source":"lib/Vec2.ex:135","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"dot","module_id":"Graphmath.Vec2","id":"dot/2","doc":"`dot( a, b )` finds the dot (inner) product of one `vec2` with another `vec2`.\n\n`a` is the first `vec2`.\n\n`b` is the second `vec2`.\n\nIt returns a float of the value (a<sub>x</sub>b<sub>x</sub> + a<sub>y</sub>b<sub>y</sub> ).\n","arity":2},{"type":"def","source":"lib/Vec2.ex:167","signature":[["a",[],null]],"object_type":"FunctionObject","name":"length","module_id":"Graphmath.Vec2","id":"length/1","doc":"`length(a)` finds the length (Eucldiean or L2 norm) of a `vec2`.\n\n`a` is the `vec2` to find the length of.\n\nIt returns a float of the value (sqrt( a<sub>x</sub><sup>2</sup> + a<sub>y</sub><sup>2</sup>)).\n","arity":1},{"type":"def","source":"lib/Vec2.ex:202","signature":[["a",[],null]],"object_type":"FunctionObject","name":"length_manhattan","module_id":"Graphmath.Vec2","id":"length_manhattan/1","doc":"`length_manhattan(a)` finds the Manhattan (L1 norm) length of a `vec2`.\n\n`a` is the `vec2` to find the Manhattan length of.\n\nIt returns a float of the value (a<sub>x</sub> + a<sub>y</sub>).\n\nThe Manhattan length is the sum of the components.\n","arity":1},{"type":"def","source":"lib/Vec2.ex:187","signature":[["a",[],null]],"object_type":"FunctionObject","name":"length_squared","module_id":"Graphmath.Vec2","id":"length_squared/1","doc":"`length_squared(a)` finds the square of the length of a vec2 (a).\n\nIn many cases, this is sufficient for comparisions and avaoids a sqrt.\n\nIt returns a float of the value (ax*ax + ay*ay).\n`length_squared(a)` finds the square of the length of a `vec2`.\n\n`a` is the `vec2` to find the length squared of.\n\nIt returns a float of the value a<sub>x</sub><sup>2</sup> + a<sub>y</sub><sup>2</sup>.\n\nIn many cases, this is sufficient for comparisons and avoids a square root.\n","arity":1},{"type":"def","source":"lib/Vec2.ex:240","signature":[["a",[],null],["b",[],null],["t",[],null]],"object_type":"FunctionObject","name":"lerp","module_id":"Graphmath.Vec2","id":"lerp/3","doc":"`lerp(a,b,t)` is used to linearly interpolate between two given vectors a and b along an interpolant t.\n\nThe interpolant `t`  is on the domain [0,1]. Behavior outside of that is undefined.\n`lerp(a,b,t)` linearly interpolates between one `vec2` and another `vec2` along an interpolant.\n\n`a` is the starting `vec2`.\n\n`b` is the ending `vec2`.\n\n`t` is the interpolant float, on the domain [0,1].\n\nIt returns a `vec2` of the form (1-t)**a** - (t)**b**.\n\nThe interpolant `t` is on the domain [0,1]. Behavior outside of that is undefined.\n","arity":3},{"type":"def","source":"lib/Vec2.ex:104","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"multiply","module_id":"Graphmath.Vec2","id":"multiply/2","doc":"`multiply( a, b)` mulitplies element-wise a vec2 (a) by a vec2 (b).\n\nIt returns a tuple of the form { ax*bx, ay*by }.\n`multiply( a, b )` multiplies element-wise a `vec2` by another `vec2`.\n\n`a` is the `vec2` multiplicand.\n\n`b` is the `vec2` multiplier.\n\nIt returns a `vec2` of the form { a<sub>x</sub>b<sub>x</sub>, a<sub>y</sub>b<sub>y</sub> }.\n","arity":2},{"type":"def","source":"lib/Vec2.ex:273","signature":[["a",[],null],["b",[],null],["distance",[],null]],"object_type":"FunctionObject","name":"near","module_id":"Graphmath.Vec2","id":"near/3","doc":"`near(a,b, distance)` checks whether two `vec2`s are within a certain distance of each other.\n\n`a` is the first `vec2`.\n\n`b` is the second `vec2`.\n\n`distance` is the distance between them as a float.\n","arity":3},{"type":"def","source":"lib/Vec2.ex:217","signature":[["a",[],null]],"object_type":"FunctionObject","name":"normalize","module_id":"Graphmath.Vec2","id":"normalize/1","doc":"`normalize(a)` finds the unit vector with the same direction as a `vec2`.\n\n`a` is the `vec2` to be normalized.\n\nIt returns a `vec2` of the form `{normx, normy}`.\n\nThis is done by dividing each component by the vector's magnitude.\n","arity":1},{"type":"def","source":"lib/Vec2.ex:306","signature":[["a",[],null]],"object_type":"FunctionObject","name":"perp","module_id":"Graphmath.Vec2","id":"perp/1","doc":"`perp(a)` creates a vector perpendicular to another vector `a`.\n\n`a` is the `vec2` to be perpindicular to.\n\nThis returns a `vec2` perpindicular to `a`, to the right of the original `a`.\n","arity":1},{"type":"def","source":"lib/Vec2.ex:153","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"perp_prod","module_id":"Graphmath.Vec2","id":"perp_prod/2","doc":"`perp_prod( a, b )` finds the perpindicular product of one `vec2` with another `vec2`.\n\n`a` is the first `vec2`.\n\n`b` is the second `vec2`.\n\nThe perpindicular product is the magnitude of the cross-product between the two vectors.\n\nIt returns a float of the value (a<sub>x</sub>b<sub>y</sub> - b<sub>x</sub>a<sub>y</sub>).\n","arity":2},{"type":"def","source":"lib/Vec2.ex:291","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"project","module_id":"Graphmath.Vec2","id":"project/2","doc":"`project(a,b)` projects one `vec2` onto another `vec2`.\n\n`a` is the first `vec2`.\n\n`b` is the second `vec2`.\n\nThis returns a `vec2` representing the image of `a` in the direction of `b`.\n","arity":2},{"type":"def","source":"lib/Vec2.ex:256","signature":[["a",[],null],["theta",[],null]],"object_type":"FunctionObject","name":"rotate","module_id":"Graphmath.Vec2","id":"rotate/2","doc":"`rotate(a,theta)` rotates a `vec2` CCW about the +Z axis.\n\n`a` is the `vec2` to rotate.\n\n`theta` is the number of radians to rotate by as a float.\n\nThis returns a `vec2`.\n","arity":2},{"type":"def","source":"lib/Vec2.ex:120","signature":[["a",[],null],["scale",[],null]],"object_type":"FunctionObject","name":"scale","module_id":"Graphmath.Vec2","id":"scale/2","doc":"`scale( a, scale )` uniformly scales a `vec2`.\n\n`a` is the `vec2` to be scaled.\n\n`scale` is the float to scale each element of `a` by.\n\nIt returns a tuple of the form { a<sub>x</sub>scale, a<sub>y</sub>scale }.\n","arity":2},{"type":"def","source":"lib/Vec2.ex:85","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"subtract","module_id":"Graphmath.Vec2","id":"subtract/2","doc":"`subtract(a, b )` subtracts one `vec2` from another `vec2`.\n\n`a` is the `vec2` minuend.\n\n`b` is the `vec2` subtrahend.\n\nIt returns a `vec2` of the form { a<sub>x</sub> - b<sub>x</sub>, a<sub>y</sub> - b<sub>y</sub> }.\n\n(the terminology was found [here](http://mathforum.org/library/drmath/view/58801.html)).\n","arity":2},{"type":"def","source":"lib/Vec3.ex:62","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"add","module_id":"Graphmath.Vec3","id":"add/2","doc":"`add( a, b)` adds two `vec3`s.\n\n`a` is the first `vec3`.\n\n`b` is the second `vec3`.\n\nIt returns a `vec3` of the form { a<sub>x</sub> + b<sub>x</sub>, a<sub>y</sub> + b<sub>y</sub>, a<sub>z</sub> + b<sub>z</sub> }.\n","arity":2},{"type":"def","source":"lib/Vec3.ex:19","signature":[],"object_type":"FunctionObject","name":"create","module_id":"Graphmath.Vec3","id":"create/0","doc":"`create()` creates a zeroed `vec3`.\n\nIt takes no arguments.\n\nIt returns a `vec3` of the form `{ 0.0, 0.0, 0.0 }`.\n","arity":0},{"type":"def","source":"lib/Vec3.ex:47","signature":[["vec",[],null]],"object_type":"FunctionObject","name":"create","module_id":"Graphmath.Vec3","id":"create/1","doc":"`create(vec)` creates a `vec3` from a list of 3 or more floats.\n\n`vec` is a list of 3 or more floats.\n\nIt returns a `vec3` of the form `{x,y,z}`, where `x`, `y`, and `z` are the first three elements in `vec`.\n","arity":1},{"type":"def","source":"lib/Vec3.ex:35","signature":[["x",[],null],["y",[],null],["z",[],null]],"object_type":"FunctionObject","name":"create","module_id":"Graphmath.Vec3","id":"create/3","doc":"`create(x,y,z)` creates a `vec3` of value (x,y,z).\n\n`x` is the first element of the `vec3` to be created.\n\n`y` is the second element of the `vec3` to be created.\n\n`z` is the third element of the `vec3` to be created.\n\nIt returns a `vec3` of the form `{x,y,z}`.\n","arity":3},{"type":"def","source":"lib/Vec3.ex:147","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"cross","module_id":"Graphmath.Vec3","id":"cross/2","doc":"`cross( a, b)` finds the cross productof one `vec3` with another `vec3`.\n\n`a` is the first `vec3`.\n\n`b` is the second `vec3`.\n\nIt returns a float of the value ( a<sub>y</sub>b<sub>z</sub> - a<sub>z</sub>b<sub>y</sub>, a<sub>z</sub>b<sub>x</sub> - a<sub>x</sub>b<sub>z</sub>, a<sub>x</sub>b<sub>y</sub> - a<sub>y</sub>b<sub>x</sub>).\n\nThe cross product of two vectors is a vector perpendicular to the two source vectors.\nIts magnitude will be the area of the parallelogram made by the two souce vectors.\n\n","arity":2},{"type":"def","source":"lib/Vec3.ex:127","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"dot","module_id":"Graphmath.Vec3","id":"dot/2","doc":"`dot( a, b)` finds the dot (inner) product of one `vec3` with another `vec3`.\n\n`a` is the first `vec3`.\n\n`b` is the second `vec3`.\n\nIt returns a float of the value (a<sub>x</sub>b<sub>x</sub> + a<sub>y</sub>b<sub>y</sub> + a<sub>z</sub>b<sub>z</sub>).\n","arity":2},{"type":"def","source":"lib/Vec3.ex:162","signature":[["a",[],null]],"object_type":"FunctionObject","name":"length","module_id":"Graphmath.Vec3","id":"length/1","doc":"`length(a)` finds the length (Eucldiean or L2 norm) of a `vec3`.\n\n`a` is the `vec3` to find the length of.\n\nIt returns a float of the value (sqrt( a<sub>x</sub><sup>2</sup> + a<sub>y</sub><sup>2</sup> + a<sub>z</sub><sup>2</sup>)).\n","arity":1},{"type":"def","source":"lib/Vec3.ex:192","signature":[["a",[],null]],"object_type":"FunctionObject","name":"length_manhattan","module_id":"Graphmath.Vec3","id":"length_manhattan/1","doc":"`length_manhattan(a)` finds the Manhattan (L1 norm) length of a `vec3`.\n\n`a` is the `vec3` to find the Manhattan length of.\n\nIt returns a float of the value (a<sub>x</sub> + a<sub>y</sub> + a<sub>z</sub>).\n\nThe Manhattan length is the sum of the components.\n","arity":1},{"type":"def","source":"lib/Vec3.ex:177","signature":[["a",[],null]],"object_type":"FunctionObject","name":"length_squared","module_id":"Graphmath.Vec3","id":"length_squared/1","doc":"`length_squared(a)` finds the square of the length of a `vec3`.\n\n`a` is the `vec3` to find the length squared of.\n\nIt returns a float of the value a<sub>x</sub><sup>2</sup> + a<sub>y</sub><sup>2</sup> + a<sub>z</sub><sup>2</sup>.\n\nIn many cases, this is sufficient for comparisons and avoids a square root.\n","arity":1},{"type":"def","source":"lib/Vec3.ex:227","signature":[["a",[],null],["b",[],null],["t",[],null]],"object_type":"FunctionObject","name":"lerp","module_id":"Graphmath.Vec3","id":"lerp/3","doc":"`lerp(a,b,t)` linearly interpolates between one `vec3` and another `vec3` along an interpolant.\n\n`a` is the starting `vec3`.\n\n`b` is the ending `vec3`.\n\n`t` is the interpolant float, on the domain [0,1].\n\nIt returns a `vec3` of the form (1-t)**a** - (t)**b**.\n\nThe interpolant `t` is on the domain [0,1]. Behavior outside of that is undefined.\n","arity":3},{"type":"def","source":"lib/Vec3.ex:96","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"multiply","module_id":"Graphmath.Vec3","id":"multiply/2","doc":"`multiply( a, b)` multiplies element-wise a `vec3` by another `vec3`.\n\n`a` is the `vec3` multiplicand.\n\n`b` is the `vec3` multiplier.\n\nIt returns a `vec3` of the form { a<sub>x</sub>b<sub>x</sub>, a<sub>y</sub>b<sub>y</sub>, a<sub>z</sub>b<sub>z</sub> }.\n","arity":2},{"type":"def","source":"lib/Vec3.ex:243","signature":[["a",[],null],["b",[],null],["distance",[],null]],"object_type":"FunctionObject","name":"near","module_id":"Graphmath.Vec3","id":"near/3","doc":"`near(a,b, distance)` checks whether two `vec3`s are within a certain distance of each other.\n\n`a` is the first `vec3`.\n\n`b` is the second `vec3`.\n\n`distance` is the distance between them as a float.\n","arity":3},{"type":"def","source":"lib/Vec3.ex:207","signature":[["a",[],null]],"object_type":"FunctionObject","name":"normalize","module_id":"Graphmath.Vec3","id":"normalize/1","doc":"`normalize(a)` finds the unit vector with the same direction as a `vec3`.\n\n`a` is the `vec3` to be normalized.\n\nIt returns a `vec3` of the form `{normx, normy, normz}`.\n\nThis is done by dividing each component by the vector's magnitude.\n","arity":1},{"type":"def","source":"lib/Vec3.ex:266","signature":[["v",[],null],["k",[],null],["theta",[],null]],"object_type":"FunctionObject","name":"rotate","module_id":"Graphmath.Vec3","id":"rotate/3","doc":"`rotate( v, k, theta)` rotates a vector (v) about a unit vector (k) by theta radians.\n\n`v` is the `vec3` to be rotated.\n\n`k` is the `vec3` axis of rotation. *It must be of unit length*.\n\n`theta` is the angle in radians to rotate as a float.\n\nThis uses the [Formula of Rodriguez](http://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula):\n\n**V**<sub>rot</sub> = **V**cos(theta) + (**K** x **V**)sin(theta) + **K**(**K** dot **V**)(1-cos(theta))\n","arity":3},{"type":"def","source":"lib/Vec3.ex:112","signature":[["a",[],null],["scale",[],null]],"object_type":"FunctionObject","name":"scale","module_id":"Graphmath.Vec3","id":"scale/2","doc":"`scale( a, scale)` uniformly scales a `vec3`.\n\n`a` is the `vec3` to be scaled.\n\n`scale` is the float to scale each element of `a` by.\n\nIt returns a tuple of the form { a<sub>x</sub>scale, a<sub>y</sub>scale, a<sub>z</sub>scale }.\n","arity":2},{"type":"def","source":"lib/Vec3.ex:80","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"subtract","module_id":"Graphmath.Vec3","id":"subtract/2","doc":"`subtract(a, b)` subtracts one `vec3` from another `vec3`.\n\n`a` is the `vec3` minuend.\n\n`b` is the `vec3` subtrahend.\n\nIt returns a `vec3` of the form { a<sub>x</sub> - b<sub>x</sub>, a<sub>y</sub> - b<sub>y</sub>, a<sub>z</sub> - b<sub>z</sub> }.\n\n(the terminology was found [here](http://mathforum.org/library/drmath/view/58801.html)).\n","arity":2}],"language":"elixir","git_repo_url":"https://github.com/crertel/graphmath.git","args":[]}